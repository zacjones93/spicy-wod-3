---
description:
globs:
alwaysApply: false
---
## PRD Management Rule

*This rule guides the creation and maintenance of the `docs/PRD.md` file.*

### Core Directive
Create, maintain, and update the `docs/PRD.md` file located in the root of the project. Operate based on information found in `NOTES.md` and ensure `docs/PRD.md` aligns with the predefined structure below.

### Strict Limitations
* **File Operations:** You are ONLY permitted to read `NOTES.md` and read/write to `docs/PRD.md`. You must not interact with any other files or perform any other actions.
* **Communication:** You are forbidden from generating any conversational output, commentary, preamble, or summaries. Your entire output must be the content of the `docs/PRD.md` file itself. Do not repeat the contents of `docs/PRD.md` back to the user in any other format.
* **User Interaction:** You do not directly converse with the user. If sections of the `docs/PRD.md` are incomplete, you will indicate this *within* the `docs/PRD.md` file using a specific comment format.

### PRD Structure and Content Source
The `docs/PRD.md` file must be structured around the following eight key sections, derived from the "Technical Plan Outline" questions below.

#### Technical Plan Outline (Source for docs/PRD.md Structure and TODOs)

1.  **Core Functionality & Purpose:**
    * Primary problem solved for the end-user.
    * Core functionality required.
2.  **Key Technical Goals & Scope:**
    * Critical technical objectives (e.g., performance benchmarks, integrations, tech stack).
    * Explicitly out-of-scope items for the current development cycle.
3.  **User Interaction & Technical Design:**
    * Primary user type (e.g., API consumer, web app user).
    * Interaction methods with core features (reference UI mockups, API contracts, user flows if available in `NOTES.md`).
4.  **Essential Features & Implementation Details:**
    * Absolute must-have functionalities for the initial version.
    * High-level implementation considerations for each feature.
5.  **Acceptance Criteria & "Done" Definition:**
    * Specific, testable conditions for each key feature/user story to define "done."
6.  **Key Technical Requirements & Constraints:**
    * Non-negotiable technical requirements (e.g., target platform, languages, frameworks, integrations).
    * Non-functional requirements (e.g., performance targets, scalability, security, reliability) and constraints (e.g., infrastructure, budget).
7.  **Success Metrics (Technical Viewpoint):**
    * How the development team will measure technical success post-deployment (e.g., system stability, error rates, performance metrics).
8.  **Development Logistics & Lookahead:**
    * Significant technical risks or dependencies and initial mitigation thoughts.
    * Major assumptions that could derail development if incorrect.
    * Future development considerations for current design (e.g., extensibility).

### Workflow

1.  **Process User Request:** A user request triggers your operation. (This prompt assumes the trigger is an implicit instruction to update/create the PRD).
2.  **Access Files:**
    * Read the content of `NOTES.md`. This is your primary source of information for populating `docs/PRD.md`.
    * Read the current content of `docs/PRD.md` if it exists.
3.  **Manage `docs/PRD.md`:**
    * **Initialization:** If `docs/PRD.md` does not exist, create it. Populate it with the eight section headers listed above.
    * **Content Integration:** For each of the eight sections in `docs/PRD.md`:
        * Review `NOTES.md` for relevant information pertaining to that section.
        * Update the corresponding section in `docs/PRD.md` with this information. If the section already has content, intelligently merge or update it based on the latest `NOTES.md`. Strive to be comprehensive but concise.
    * **Identify Gaps & Insert TODOs:** After attempting to populate each section from `NOTES.md`:
        - A TODO comment MUST ONLY be inserted if, after reviewing `NOTES.md`, the section in `docs/PRD.md` remains genuinely empty, or contains only placeholder text (e.g., a rephrasing of the section title without substantive information), or if critical information explicitly requested by the section's definition (as outlined in "Technical Plan Outline") is clearly missing and not found in `NOTES.md`.
        - Do NOT insert a TODO comment if the section has been populated with relevant information from `NOTES.md`, even if that information could be more detailed. The purpose of the TODO is to address missing information, not to solicit further elaboration on existing information unless that information is so scant as to be effectively missing or fails to address the core requirements of the section.
        - **TODO Comment Format:** Use an HTML comment starting with `<!-- TODO: ... -->`.
        - **Contextual TODO Prompts:** When a TODO is necessary according to the criteria above, analyze `NOTES.md` and the current `docs/PRD.md` to infer a specific question that addresses the missing information. The examples provided in "Technical Plan Outline" for each section should be used as inspiration for formulating these contextual prompts. The goal is to ask targeted questions based on the current context, rather than always using the generic examples, to guide the user in providing the specific missing information.

4.  **Output:** Your final action is to output the complete, updated content of `docs/PRD.md`. No other text or explanation should be provided.

### Final Instruction
Execute these instructions precisely. Your sole focus is the `docs/PRD.md` file.
