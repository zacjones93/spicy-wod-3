---
description:
globs:
alwaysApply: false
---
# Tech Stack Management Rule

*This rule guides the creation and maintenance of the `docs/TECH_STACK.md` file.*

### Core Directive
Create, maintain, and update the `docs/TECH_STACK.md` file based on information found in `NOTES.md`, `docs/PRD.md`, and `docs/openapi.yaml` (or similar), ensuring alignment with the predefined structure below.

### Strict Limitations
* **File Operations:** Only read `NOTES.md`, `docs/PRD.md`, `docs/openapi.yaml` (or equivalents), and read/write to `docs/TECH_STACK.md`. Do not interact with other files.
* **Communication:** You are forbidden from generating any conversational output, commentary, preamble, or summaries. Your entire output must be the content of the `docs/TECH_STACK.md` file itself. Do not repeat the contents of `docs/TECH_STACK.md` back to the user in any other format.
* **User Interaction:** You do not directly converse with the user. If sections of the `docs/TECH_STACK.md` are incomplete, you will indicate this *within* the `docs/TECH_STACK.md` file using a specific comment format.

### Tech Stack Definition Structure and Content Source
The `docs/TECH_STACK.md` file must be structured around the following key sections. These sections are derived from the "Tech Stack Definition Outline" questions.

#### Tech Stack Definition Outline (Source for docs/TECH_STACK.md Structure and TODOs)

1.  **Project Overview & Goals (Informed by PRD):**
    * Briefly, what is the project this tech stack is for? (Reference `docs/PRD.md` for project description and goals).
    * What are the primary goals influencing technology choices (e.g., scalability, speed of development, specific integrations, team expertise, budget)? (Reference `docs/PRD.md` for technical goals and constraints).
2.  **Core Languages & Runtimes:**
    * What primary programming language(s) will be used for the backend? Specify version(s) if critical. Why this choice?
    * What primary programming language(s) and/or frameworks will be used for the frontend? Specify version(s) if critical. Why this choice?
    * Are there specific runtime environments required (e.g., Node.js version, Python version, JVM version, .NET version)?
3.  **Frameworks & Libraries (Backend):**
    * What backend frameworks are being chosen or considered (e.g., Django, Ruby on Rails, Spring Boot, Express.js, NestJS, ASP.NET Core)? Justify the choice.
    * List key libraries essential for the backend (e.g., ORM/database interaction, authentication/authorization, caching, background job processing, API documentation generation).
4.  **Frameworks & Libraries (Frontend):**
    * What frontend frameworks/libraries are being chosen or considered (e.g., React, Angular, Vue, Svelte, Blazor)? Justify the choice.
    * List key UI component libraries (e.g., Material UI, Bootstrap, Tailwind CSS, Ant Design) or state management solutions (e.g., Redux, Zustand, Pinia, NgRx) to be used.
5.  **Database & Data Storage:**
    * What type of database is required (e.g., Relational/SQL, NoSQL Document, NoSQL Key-Value, Graph, Time Series)? Why? (Consider data types and relationships outlined in `docs/PRD.md`).
    * Specify the chosen database system(s) (e.g., PostgreSQL, MySQL, MongoDB, Cassandra, Neo4j, InfluxDB).
    * Are other data storage solutions needed (e.g., caching like Redis/Memcached, object storage like AWS S3/Google Cloud Storage, message queues like RabbitMQ/Kafka)?
6.  **Infrastructure & Deployment:**
    * Where will the application be hosted (e.g., AWS, Azure, GCP, DigitalOcean, Vercel, Netlify, on-premise)?
    * What specific services will be used (e.g., EC2, Lambda, Azure App Service, Google Kubernetes Engine)?
    * What containerization technologies will be used (e.g., Docker, Podman)? Orchestration (e.g., Kubernetes, Docker Swarm)?
    * What CI/CD tools and processes are planned (e.g., Jenkins, GitLab CI, GitHub Actions, CircleCI)?
7.  **APIs & Integrations:**
    * Will the project expose its own APIs? If so, what style (e.g., REST, GraphQL, gRPC, WebSockets)? (Reference `docs/PRD.md` and `docs/openapi.yaml` for API requirements if any).
    * What critical third-party services or APIs will be integrated (e.g., payment gateways like Stripe/PayPal, identity providers like Auth0/Okta, analytics services, communication services like Twilio/SendGrid)? (Reference `docs/PRD.md` for known integrations).
8.  **Development Tools & Standards:**
    * What version control system will be used (e.g., Git)? Where will repositories be hosted (e.g., GitHub, GitLab, Bitbucket)?
    * Are there specific IDEs, linters (e.g., ESLint, Pylint), or code formatting standards (e.g., Prettier, Black)?
    * What testing frameworks and strategies will be employed (e.g., Jest, PyTest, JUnit, Cypress, Selenium; unit, integration, E2E testing)? (Reference `docs/PRD.md` for acceptance criteria).
9.  **Security Considerations:**
    * What are the key security requirements for the chosen technologies (e.g., OWASP Top 10 mitigations)? (Reference `docs/PRD.md` for security requirements).
    * Are there specific libraries, tools, or practices for security (e.g., for authentication, authorization, input validation, data encryption, dependency scanning, secrets management)?
10. **Rationale & Alternatives Considered:**
    * For major technology choices (especially languages, frameworks, databases, hosting), briefly explain the rationale and any significant alternatives that were considered and why they were not chosen.

### Workflow

1.  **Process User Request:** A user request triggers your operation. (This prompt assumes the trigger is an implicit instruction to update/create the `docs/TECH_STACK.md`).
2.  **Access Files:**
    * Read the content of `NOTES.md` (or the specified input file).
    * Read the content of `docs/PRD.md` (or the specified input file).
    * Read the content of `docs/openapi.yaml` (or the specified input file) if it exists.
    * These files are your primary sources of information for populating `docs/TECH_STACK.md`.
    * Read the current content of `docs/TECH_STACK.md` if it exists.
3.  **Manage `docs/TECH_STACK.md`:**
    * **Initialization:** If `docs/TECH_STACK.md` does not exist, create it. Populate it with the ten section headers listed above.
    * **Content Integration:** For each of the ten sections in `docs/TECH_STACK.md`:
        * Review `NOTES.md`, `docs/PRD.md`, and `docs/openapi.yaml` for relevant information pertaining to that section. Note that some outline points specifically suggest referencing `docs/PRD.md` or `docs/openapi.yaml`.
        * Update the corresponding section in `docs/TECH_STACK.md` with this information. If the section already has content, intelligently merge or update it based on the latest information from all source files. Strive to be comprehensive but concise.
    * **Identify Gaps & Insert TODOs:** After attempting to populate each section from `NOTES.md`, `docs/PRD.md`, and `docs/openapi.yaml`:
        - A TODO comment MUST ONLY be inserted if, after reviewing `NOTES.md`, `docs/PRD.md`, and `docs/openapi.yaml`, the section in `docs/TECH_STACK.md` remains genuinely empty, or contains only placeholder text (e.g., a rephrasing of the section title without substantive information), or if critical information explicitly requested by the section's definition (as outlined in "Tech Stack Definition Outline") is clearly missing and not found in the source files.
        - Do NOT insert a TODO comment if the section has been populated with relevant information from the source files, even if that information could be more detailed. The purpose of the TODO is to address missing information, not to solicit further elaboration on existing information unless that information is so scant as to be effectively missing or fails to address the core requirements of the section.
        - **TODO Comment Format:** Use an HTML comment starting with `<!-- TODO: ... -->`. (This aligns the format with the `prd` rule for consistency and allows the guiding question to be embedded within the comment, which supports the goal stated in "Contextual TODO Prompts".)
        - **Contextual TODO Prompts:** The primary goal of the TODO comment, when necessary according to the criteria above, is to clearly state what information is missing by asking the relevant question. Provide helpful examples (either from the outline point itself or generated if the outline point lacks them) to elicit the required details. Formulate targeted questions based on the current context and the specific missing information.

4.  **Output:** Your final action is to output the complete, updated content of `docs/TECH_STACK.md`. No other text or explanation should be provided.

### Final Instruction
Execute these instructions precisely. Your sole focus is the `docs/TECH_STACK.md` file.
