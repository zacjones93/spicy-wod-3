---
description: 
globs: 
alwaysApply: false
---
# spicy-wod-3 - Project Rules

## 1. Project Overview

goal: Brutalist Next.js workout tracker with authentication, logging, and management for CrossFit-style workouts, movements, and results. Prioritizes clarity, accessibility, and type safety.
type: Web Application
key features:
- User Authentication (Email + Password via NextAuth.js)
- Workout Logging and Tracking
- Movement and Tag Management
- Spreadsheet-based calculator
- Accessible, brutalist UI (no rounded edges, keyboard navigation)

## 2. Technology Stack

language(s): TypeScript 5.3.3 (strict mode)
framework(s): Next.js 15.3.2 (App Router), React 19.1.0
ui library/styling: Tailwind CSS v3.4.0, Shadcn UI, Lucide React
state management: React Context, nuqs (URL state)
database(s): Cloudflare D1 (SQLite) via Drizzle ORM
db migrations: drizzle-kit, wrangler
testing: vitest (unit, integration)
api layer: REST (Next.js API Routes)
key libraries:
- next-auth@5.0.0-beta.28 (Authentication)
- drizzle-orm@0.43.1 (ORM)
- zod@3.24.4 (Validation)
- date-fns@4.1.0 (Date utilities)
- biome@1.9.4 (Linting/formatting)

## 3. Project Structure

main source directory: app/
core directories:
- components/: app/components/ (Reusable UI, Shadcn UI)
- lib/: app/lib/ (Shared utilities)
- api/: app/api/ (API routes)
- server/: app/server/ (Business logic, db)
- types/: app/types/ (Type definitions)
- db/: app/server/db/ (Schema, client)
- drizzle/: drizzle/ (Migrations)
- tests/: [N/A - tests are co-located or not yet extensive]
diagram/link: [N/A]

## 4. Coding Standards & Conventions

language usage: Strict TypeScript (`strict: true`), explicit types everywhere, avoid `any` (enforced by Biome). Use async/await. All interactive elements must be accessible (e.g., use <button> for actions, not <div>).
naming conventions:
- files/folders: kebab-case (e.g., log-form-client.tsx)
- components: PascalCase (e.g., LogFormClient)
- variables/functions: camelCase
- types/interfaces: PascalCase
code style/formatting: Biome (`biome.json` is canonical, see package.json scripts). 4-space tab width, double quotes, trailing commas, import sorting.
comments: English only, minimal, code should be self-explanatory.
imports: Absolute paths via @/ (tsconfig.json), sorted by Biome.
accessibility: All actions must be keyboard accessible. Use semantic elements (button, input). Labels must be associated with controls. No mouse-only actions.
error handling: No non-null assertions. Use explicit runtime errors for missing values.

## 5. Key Principles & Best Practices

- Zen of Python (see _global.mdc)
- Observability: Add excessive logging
- Many Small Files: Prefer new files over large ones
- Micro-Milestones: Commit-sized changes
- Accessibility: All UI must be usable by keyboard and screen reader
- Type Safety: No `any`, always use explicit types
- Linting: All code must pass Biome checks before commit

## 6. Testing

framework: vitest
types: [N/A - no explicit test types documented]
location: Co-located with source files (e.g., *.test.tsx)
coverage expectations: [N/A]

## 7. Tooling & Workflow

package manager: pnpm 9.10.0
build command(s): pnpm build
run command(s) (dev): pnpm dev
version control: Git, Conventional Commits (feat:, fix:, chore:). No bypassing pre-commit hooks.
ci/cd: [N/A - no CI/CD config found]
ide recommendations: VS Code with Biome extension (see README)

## 8. (Optional) Database / API Guidelines

- Use Drizzle ORM for all db access
- Migrations via drizzle-kit and wrangler
- Schema in app/server/db/schema.ts

## 9. (Optional) Specific Feature Rules

- OG Image Generation: /api/og route
- Accessibility: All new UI must pass Biome a11y lint rules

## 10. (Optional) Rule Referencing

- See [cli-github-search.mdc](mdc:.cursor/rules/cli-github-search.mdc)
- See [req-mermaid.mdc](mdc:.cursor/rules/req-mermaid.mdc)
- See [req-shape-up-breadboard.mdc](mdc:.cursor/rules/req-shape-up-breadboard.mdc)
- See [req-shape-up-pitch.mdc](mdc:.cursor/rules/req-shape-up-pitch.mdc)
- See [_global.mdc](mdc:.cursor/rules/_global.mdc)
- See [db-migrate.mdc](mdc:.cursor/rules/db-migrate.mdc)
- See [task-plan.mdc](mdc:.cursor/rules/task-plan.mdc)
- See [zen-coding.mdc](mdc:.cursor/rules/zen-coding.mdc)
- See [task-next.mdc](mdc:.cursor/rules/task-next.mdc)
- See [task-execute.mdc](mdc:.cursor/rules/task-execute.mdc)
- See [scripts-create.mdc](mdc:.cursor/rules/scripts-create.mdc)
- See [react-rules.mdc](mdc:.cursor/rules/react-rules.mdc)
- See [pull-request-create.mdc](mdc:.cursor/rules/pull-request-create.mdc)
- See [prompt-improve.mdc](mdc:.cursor/rules/prompt-improve.mdc)
- See [project-update-rules.mdc](mdc:.cursor/rules/project-update-rules.mdc)
- See [project-todos-next.mdc](mdc:.cursor/rules/project-todos-next.mdc)
- See [pnpm-fixes.mdc](mdc:.cursor/rules/pnpm-fixes.mdc)
- See [docs-tech-stack.mdc](mdc:.cursor/rules/docs-tech-stack.mdc)
- See [docs-sync.mdc](mdc:.cursor/rules/docs-sync.mdc)
- See [docs-structure.mdc](mdc:.cursor/rules/docs-structure.mdc)
- See [docs-prd.mdc](mdc:.cursor/rules/docs-prd.mdc)
- See [docs-openapi-spec.mdc](mdc:.cursor/rules/docs-openapi-spec.mdc)
- See [docs-diagram.mdc](mdc:.cursor/rules/docs-diagram.mdc)
- See [cli-wrangler.mdc](mdc:.cursor/rules/cli-wrangler.mdc)
- See [cli-worktree.mdc](mdc:.cursor/rules/cli-worktree.mdc)
- See [cli-pack.mdc](mdc:.cursor/rules/cli-pack.mdc)
