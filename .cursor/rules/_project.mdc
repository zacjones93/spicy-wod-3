---
description: 
globs: 
alwaysApply: false
---
# spicy-wod-3 - Project Rules

## 1. Project Overview

goal: A Next.js starter kit that uses NextAuth.js for simple email + password login, Drizzle as the ORM, and a Cloudflare D1 (SQLite) database to persist the data. The original template used Neon Postgres, but this has been adapted for Cloudflare.
type: Web Application
key features:
- User Authentication (Email + Password via NextAuth.js)
- Workout Logging and Tracking (Inferred from "Spicy WOD" name and app structure)
- Movement Management (Inferred from app structure)
- Spreadsheet-based calculator (Inferred from app structure)

## 2. Technology Stack

language(s): TypeScript 5.3.3 (from package.json, tsconfig.json target ES2022)
framework(s): Next.js 15.3.2 (App Router - from package.json, next.config.mjs)
ui library/styling: Tailwind CSS v3.4.0 (tailwind.config.ts, package.json), Shadcn UI (components.json, app/components/ui), Lucide React (Icons)
database(s): Cloudflare D1 (SQLite compatible) via Drizzle ORM (drizzle.config.ts, wrangler.toml, package.json)
state management: React Context (Implicit with Next.js App Router), Potentially Zustand or other if specific stores are found, but not explicit in package.json as a primary global state manager. Using `nuqs` for URL state management.
api layer: REST (via Next.js API Routes)
key libraries:
- `next-auth@5.0.0-beta.28` (Authentication)
- `drizzle-orm@0.43.1` (ORM)
- `zod@3.24.4` (Validation)
- `geist@1.2.0` (Fonts)
- `date-fns@4.1.0` (Date utilities)

## 3. Project Structure

main source directory: app/
core directories: [Verify existence and common usage patterns]
- components/: (app/components/ - Reusable UI elements, Shadcn UI components)
- lib/ or utils/: (app/lib/ - Shared utility functions, e.g., `app/lib/utils.ts`)
- services/ or api/: (app/api/ - Next.js API routes, app/server/ for server-side logic)
- types/ or interfaces/: (app/types/ - Shared type definitions)
- db/ or prisma/ or drizzle/: (app/server/db/ - Drizzle schema and client, drizzle/ for migrations)
- tests/ or __tests__/: ([N/A - No dedicated top-level test directory found, tests might be co-located or not yet implemented extensively])
diagram/link: [N/A]

## 4. Coding Standards & Conventions

language usage: Strict TypeScript mode (tsconfig.json `strict: true`), Prefer Next.js App Router features (server components, actions).
naming conventions:
- files/folders: kebab-case (observed in `app/` structure, e.g., `main-nav`)
- components: PascalCase (e.g., `MainNav.tsx`, Shadcn components)
- variables/functions: camelCase (observed in codebase)
- types/interfaces: PascalCase (observed in codebase, e.g., `NextRequest` in `app/api/og/route.tsx`)
code style/formatting: `@biomejs/biome` (from devDependencies, but no `biome.json` found at root. A `.eslintrc.json` exists but is minimal. Project rules state Biome is mandatory).
comments: English only. Minimal comments observed in current files.
imports: Absolute paths (`@/*` via `tsconfig.json` paths).

## 5. Key Principles & Best Practices

[No explicit principles documented in README.md or easily found in project structure. Global rules mention Zen of Python, Observability, Many Small Files, Micro-Milestones.]
- Adherence to The Zen of Python (as per global rules)
- Observability: Add excessive logging (as per global rules)
- Many Small Files: Prefer creating new files (as per global rules)
- Micro-Milestones: Commit-sized chunks (as per global rules)

## 6. Testing

framework: [N/A - No primary testing framework explicitly configured in `package.json` (e.g., Jest, Vitest). `eslint` is present for linting.]
types: [N/A - No specific test types outlined in project docs yet.]
location: [N/A - No dedicated test directories or co-located test files prominently visible.]
coverage expectations: [N/A]

## 7. Tooling & Workflow

package manager: pnpm 9.10.0 (from `package.json` `packageManager` field and `pnpm-lock.yaml`)
build command(s): `pnpm build` (from `package.json` scripts: `next build`)
run command(s) (dev): `pnpm dev` (from `package.json` scripts: `next dev`)
version control: Git. Conventional Commits (`feat:`, `fix:`, `chore:`) used (as per task log and global rules).
ci/cd: [N/A - No CI/CD configuration files like `.github/workflows/` or `gitlab-ci.yml` found in root.] OpenNextJS for Cloudflare (`@opennextjs/cloudflare`) is used for deployment.
ide recommendations: [N/A - No `.vscode/extensions.json` found.]

## 8. (Optional) Database / API Guidelines

[N/A - No specific `docs/database.md` or `docs/api_guidelines.md` found. Drizzle ORM is used with D1.]
- Migrations managed by `drizzle-kit` and `wrangler d1 migrations`.
- Schema defined in `app/server/db/schema.ts`.

## 9. (Optional) Specific Feature Rules

[N/A - No dedicated docs for complex features found yet.]
- OG Image Generation: API route at `/api/og` for dynamic OG images.

## 10. (Optional) Rule Referencing

[Check `.cursor/rules/` directory for other rule files.]
- See [cli-github-search.mdc](mdc:.cursor/rules/cli-github-search.mdc)
- See [req-mermaid.mdc](mdc:.cursor/rules/req-mermaid.mdc)
- See [req-shape-up-breadboard.mdc](mdc:.cursor/rules/req-shape-up-breadboard.mdc)
- See [req-shape-up-pitch.mdc](mdc:.cursor/rules/req-shape-up-pitch.mdc)
- See [_global.mdc](mdc:.cursor/rules/_global.mdc) (Global rules always apply)
- See [db-migrate.mdc](mdc:.cursor/rules/db-migrate.mdc)
- See [task-plan.mdc](mdc:.cursor/rules/task-plan.mdc)
- See [zen-coding.mdc](mdc:.cursor/rules/zen-coding.mdc)
- See [task-next.mdc](mdc:.cursor/rules/task-next.mdc)
- See [task-execute.mdc](mdc:.cursor/rules/task-execute.mdc)
- See [scripts-create.mdc](mdc:.cursor/rules/scripts-create.mdc)
- See [react-rules.mdc](mdc:.cursor/rules/react-rules.mdc)
- See [pull-request-create.mdc](mdc:.cursor/rules/pull-request-create.mdc)
- See [prompt-improve.mdc](mdc:.cursor/rules/prompt-improve.mdc)
- See [project-update-rules.mdc](mdc:.cursor/rules/project-update-rules.mdc) (This file)
- See [project-todos-next.mdc](mdc:.cursor/rules/project-todos-next.mdc)
- See [pnpm-fixes.mdc](mdc:.cursor/rules/pnpm-fixes.mdc)
- See [docs-tech-stack.mdc](mdc:.cursor/rules/docs-tech-stack.mdc)
- See [docs-sync.mdc](mdc:.cursor/rules/docs-sync.mdc)
- See [docs-structure.mdc](mdc:.cursor/rules/docs-structure.mdc)
- See [docs-prd.mdc](mdc:.cursor/rules/docs-prd.mdc)
- See [docs-openapi-spec.mdc](mdc:.cursor/rules/docs-openapi-spec.mdc)
- See [docs-diagram.mdc](mdc:.cursor/rules/docs-diagram.mdc)
- See [cli-wrangler.mdc](mdc:.cursor/rules/cli-wrangler.mdc)
- See [cli-worktree.mdc](mdc:.cursor/rules/cli-worktree.mdc)
- See [cli-pack.mdc](mdc:.cursor/rules/cli-pack.mdc)
