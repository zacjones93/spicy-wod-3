---
description:
globs:
alwaysApply: false
---
# spicy wod - Project Rules

## 1. Project Overview

goal: spicy wod is a brutalist-style workout tracking app for CrossFit-style workouts (WODs), movements, and results logging. The app is designed for usability, clarity, and efficient workout history tracking. (Source: docs/PRD.md)
type: Web Application (Next.js with Cloudflare Pages deployment)
key features:
- User authentication (signup, login, logout)
- Workout management (create, view, edit, list, log results)
- Movement tracking (list, view details, see associated workouts)
- Results logging with support for various schemes and multiple sets
- Brutalist, responsive UI with dark mode support

## 2. Technology Stack

language(s): TypeScript (version ~5.3.3 from package.json, strict mode from tsconfig.json)
framework(s): Next.js (version ~15.3.2, App Router - from package.json and project structure)
ui library/styling: Tailwind CSS (version ~3.4.0 from package.json, config: tailwind.config.ts), Shadcn UI (components.json, ui components in app/components/ui), Lucide React icons (package.json)
database(s): SQLite (via Drizzle ORM and Cloudflare D1, drizzle.config.ts, wrangler.toml)
state management: Primarily React Server Components and URL state. Client state managed with React Context/useState where necessary. (No dedicated global state library like Zustand/Redux found in package.json)
api layer: Next.js API Routes (implied by Next.js structure, e.g. app/api/), Drizzle ORM for DB interaction.
key libraries:
- drizzle-orm (^0.43.1): SQL ORM
- next-auth (5.0.0-beta.28): Authentication
- zod (^3.24.4): Schema validation
- date-fns (^4.1.0): Date utility
- @opennextjs/cloudflare (^1.0.2): Cloudflare Pages adapter for Next.js

## 3. Project Structure

main source directory: app/
core directories:
- app/(auth)/: Authentication related pages (login, signup)
- app/(main)/: Main application pages (workouts, movements, log, profile)
- app/api/: API route handlers
- app/components/: Shared React components (ui, nav, theme-provider)
- app/lib/: Utility functions (utils.ts, auth.ts)
- app/server/: Server-side logic (db, functions)
- app/server/db/: Drizzle schema (schema.ts), DB client (index.ts)
- app/types/: Shared TypeScript type definitions
- drizzle/: Drizzle ORM migration files
- public/: Static assets
- docs/: Project documentation (PRD.md, PITCH.md, tasks)
diagram/link: `docs/PITCH.md` contains a mermaid flowchart diagram.

## 4. Coding Standards & Conventions

language usage: Strict TypeScript (tsconfig.json `strict: true`), React Server Components preferred, Client Components (`"use client";`) where necessary.
naming conventions:
- files/folders: kebab-case for most files and folders (observed), PascalCase for React components (.tsx)
- components: PascalCase (e.g., `DarkModeToggle.tsx`, `WorkoutDetailClient.tsx`)
- variables/functions: camelCase (observed in codebase)
- types/interfaces: PascalCase (e.g., `WorkoutWithTagsAndMovements`, `WorkoutResultWithSets` in app/types and component props)
code style/formatting: `@biomejs/biome` (version ^1.9.4 in devDependencies, no biome.json found, but listed as preferred in global rules), ESLint (config: .eslintrc.json, extends next/core-web-vitals)
comments: English. JSDoc style comments observed for some functions. General comments for non-obvious code.
imports: Absolute paths using `@/*` (defined in tsconfig.json `paths`).

## 5. Key Principles & Best Practices

(Sourced from docs/PRD.md and docs/PITCH.md)
- Brutalist UI: No rounded edges, clear, responsive, grid-based.
- Explicit over Implicit: Simple and explicit workout management.
- Fast and Reliable: Emphasis on performance and usability.
- Data Integrity: Editing workouts should not break past results.
- Form validation via Zod.
- Debounced and URL-driven filtering/searching.
- Server components preferred for navigation, state, and data access.

## 6. Testing

framework: [Jest likely, based on `jest.mock` usage in `DarkModeToggle.test.tsx`. No explicit Jest config file found in root or `package.json` test script other than `next lint`.]
types: Unit tests (e.g., `tailwind.config.test.ts`, `DarkModeToggle.test.tsx`). E2E tests planned (mentioned in dark mode task file).
location: Co-located with source files (e.g., `tailwind.config.test.ts` in root, `DarkModeToggle.test.tsx` in `app/components/ui/`).
coverage expectations: [N/A - Not found in project context]

## 7. Tooling & Workflow

package manager: pnpm (version 9.10.0 specified in package.json `packageManager` field, `pnpm-lock.yaml` present)
build command(s): `pnpm build` (runs `next build`), `opennextjs-cloudflare build` for Cloudflare deployment.
run command(s) (dev): `pnpm dev` (runs `next dev`)
version control: Git. Conventional Commits (fix:, feat:, chore:) are used (seen in task file).
ci/cd: Cloudflare Pages (implied by `wrangler.toml`, `@opennextjs/cloudflare` usage, and deployment scripts in `package.json`). No explicit CI YAML files found in `.github/workflows` or `.gitlab-ci.yml`.
ide recommendations: [N/A - No `.vscode/extensions.json` found]

## 8. Database Guidelines

(Sourced from drizzle.config.ts, app/server/db/schema.ts, docs/PRD.md)
- ORM: Drizzle ORM with SQLite dialect for local/Cloudflare D1.
- Schema Definition: Located in `app/server/db/schema.ts`.
- Migrations: Managed by `drizzle-kit`. Commands: `pnpm db:apply` (local), `pnpm db:apply:prod` (remote). Migrations stored in `drizzle/` directory.
- Data Model: Includes Users, Movements, Tags, Workouts, WorkoutTags, WorkoutMovements, Results, Sets (detailed in `docs/PRD.md` and `app/server/db/schema.ts`).

## 9. Specific Feature Rules

- Authentication: NextAuth.js (email/password). Session management via Cloudflare KV (`USER_SESSIONS` binding in `wrangler.toml`).
- Dark Mode: Implemented using `next-themes` with a class-based strategy. CSS variables in `app/globals.css` for theming. `DarkModeToggle.tsx` component.
- Brutalist Design: Enforced via Tailwind CSS utility classes and custom styles in `app/globals.css`. Key aspects include no rounded corners, use of borders, and strong typography.

## 10. Rule Referencing

- See [task-execute.mdc](mdc:.cursor/rules/task-execute.mdc) for rules on executing planned tasks.
- See [project-update-rules.mdc](mdc:.cursor/rules/project-update-rules.mdc) for rules on updating this project context file.
- See [_global](mdc:.cursor/rules/_global.mdc) for global operational directives.
